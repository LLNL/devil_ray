###############################################################################
# Ascent CI Checks
###############################################################################
# Ref:
# https://aka.ms/yaml

#####
# TO USE A NEW CONTAINER, UPDATE TAG NAME HERE AS PART OF YOUR PR!
#####
variables:
  ubuntu_18_tag : alpinedav/ascent-ci:ubuntu-18-devel

# only build merge target pr to develop
trigger: none
pr:
  branches:
    include:
    - develop

# fast fail sanity checks
stages:
# main checks
- stage: Main
  jobs:
  ###############################################################################
  # Ubuntu build and test, using spack to build tpls
  ###############################################################################
  - job: Main
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    variables:
      COMPILER_CC: gcc
      COMPILER_CXX: g++
      COMPILER_FC: gfortran
    strategy:
      matrix:
        shared_release_double:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Release
          DRAY_USE_DOUBLE_PRECISION: ON
        shared_release:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Release
          DRAY_USE_DOUBLE_PRECISION: OFF
        shared_debug:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
          DRAY_USE_DOUBLE_PRECISION: OFF
        static_release:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Release
          DRAY_USE_DOUBLE_PRECISION: OFF
        static_release_mpi_only:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Release
          ENABLE_SERIAL: OFF
          DRAY_USE_DOUBLE_PRECISION: OFF
        static_debug:
          containerImage: ${{ variables.ubuntu_18_tag }}
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Debug
          DRAY_USE_DOUBLE_PRECISION: OFF
    container: $[ variables['containerImage'] ]

    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           #################################
           # run uber to build tpls
           #################################
           #
           pwd
           # echo system python details
           which python
           python --version
           # setup spack spec
           export SPACK_SPEC="@develop%gcc ^mfem~mpi"
           # mfem
           echo $SPACK_SPEC
           # run uber to build tpls
           python scripts/uberenv/uberenv.py --pull --spec "${SPACK_SPEC}" --spack-config-dir=scripts/uberenv_configs/spack_configs/configs/alpinedav/ubuntu_18_devel/
        displayName: 'Spack Build Tpls'

      - script: |
           #################################
           # configure
           #################################
           # setup compiler env vars
           export CC=${COMPILER_CC}
           export CXX=${COMPILER_CXX}
           export FC=${COMPILER_FC}
           ${CC} --version
           # capture current path
           export ROOT_DIR=`pwd`
           # find spack generated host config file
           export HOST_CONFIG=`ls ${ROOT_DIR}/uberenv_libs/*.cmake`
           echo $HOST_CONFIG
           # find spack installed cmake
           export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           echo $PATH
           which cmake
           cmake --version
           # prepare build dir
           mkdir build
           cd build
           # setup cmake options
           export CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DDRAY_USE_DOUBLE_PRECISION=${DRAY_USE_DOUBLE_PRECISION}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install"
           # configure
           cmake ${CMAKE_OPTS} -C ${HOST_CONFIG} ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make VERBOSE=1
        displayName: 'Build'

      - script: |
           #################################
           # test
           #################################
           # find spack installed cmake
           export ROOT_DIR=`pwd`
           export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           which ctest
           cd build
           # run ctest
           ctest -T test --output-on-failure -V
        displayName: 'Run Unit Tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'cTest'
          testResultsFiles: '**/Test.xml'
        displayName: 'Unit Test Results'
        condition: always()

      - task: CopyFiles@2
        inputs:
          contents: 'build/tests/dray/_output/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
        condition: always()

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: Devil_Ray_Test_Outputs
        condition: always()

      - script: |
           #################################
           # install
           #################################
           cd build
           make install
        displayName: 'Install'
