###############################################################################
# Ascent CI Checks
###############################################################################
# Ref:
# https://aka.ms/yaml

# only build merge target pr to develop
trigger: none
pr:
  branches:
    include:
    - develop

# fast fail sanity checks
stages:
# main checks
- stage: Main
  jobs:
  ###############################################################################
  # Ubuntu build and test, using spack to build tpls
  ###############################################################################
  - job: Ubuntu_16
    pool:
      vmImage: 'ubuntu-16.04'
    timeoutInMinutes: 0
    variables:
      COMPILER_CC: gcc-5
      COMPILER_CXX: g++-5
      COMPILER_FC: gfortran-5
    strategy:
      matrix:
        shared:
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Release
        shared_debug:
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
        static:
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Release
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           ##################
           # setup build env
           ##################
           # output env
           cat etc/*rel*
           env
           # clean default paths
           sudo rm -rf /usr/local/lib/android/
           sudo rm -rf /usr/share/miniconda/
           # add extra repo and update
           sudo add-apt-repository ppa:ubuntu-toolchain-r/test
           sudo apt-get update
           # list pkgs we need
           export APT_PKGS=binutils
           export APT_PKGS="$APT_PKGS gcc-5"
           export APT_PKGS="$APT_PKGS g++-5"
           export APT_PKGS="$APT_PKGS gfortran-5"
           export APT_PKGS="$APT_PKGS openmpi-bin"
           export APT_PKGS="$APT_PKGS libopenmpi-dev"
           export APT_PKGS="$APT_PKGS libncurses-dev"
           export APT_PKGS="$APT_PKGS libssl-dev"
           export APT_PKGS="$APT_PKGS libblas-dev"
           export APT_PKGS="$APT_PKGS liblapack-dev"
           export APT_PKGS="$APT_PKGS zlib1g-dev"
           export APT_PKGS="$APT_PKGS libgdbm-dev"
           export APT_PKGS="$APT_PKGS libreadline-dev"
           export APT_PKGS="$APT_PKGS libsqlite3-dev"
           export APT_PKGS="$APT_PKGS libbz2-dev"
           # install pkgs we need
           sudo apt-get -y install $APT_PKGS
        displayName: 'Prepare build env'

      - script: |
           #################################
           # run uber to build tpls
           #################################
           #
           pwd
           # echo system python details
           which python
           python --version
           # setup spack spec
           export SPACK_SPEC="%gcc@5"
           # vtkh
           if [ $ENABLE_VTKH  = 'OFF' ]; then export SPACK_SPEC="${SPACK_SPEC}~vtkh"; fi
           # mfem
           if [ $ENABLE_MFEM  = 'ON' ];  then export SPACK_SPEC="${SPACK_SPEC}+mfem"; fi
           if [ $ENABLE_MFEM  = 'OFF' ]; then export SPACK_SPEC="${SPACK_SPEC}~mfem"; fi
           # python
           if [ $ENABLE_PYTHON  = 'ON' ]; then export SPACK_SPEC="${SPACK_SPEC} ^python@${PYTHON_VERSION}"; fi
           if [ $ENABLE_PYTHON  = 'OFF' ]; then export SPACK_SPEC="${SPACK_SPEC}~python"; fi
           echo $SPACK_SPEC
           # run uber to build tpls
           python scripts/uberenv/uberenv.py --pull --spec "${SPACK_SPEC}" --spack-config-dir=scripts/uberenv/spack_configs/ci/ubuntu_16/
        displayName: 'Spack Build Tpls'

      - script: |
           #################################
           # configure
           #################################
           # setup compiler env vars
           export CC=${COMPILER_CC}
           export CXX=${COMPILER_CXX}
           export FC=${COMPILER_FC}
           ${CC} --version
           # capture current path
           export ROOT_DIR=`pwd`
           # find spack generated host config file
           export HOST_CONFIG=`ls ${ROOT_DIR}/uberenv_libs/*.cmake`
           echo $HOST_CONFIG
           # find spack installed cmake
           export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           echo $PATH
           which cmake
           cmake --version
           # prepare build dir
           mkdir build
           cd build
           # setup cmake options
           export CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install"
           # configure
           cmake ${CMAKE_OPTS} -C ${HOST_CONFIG} ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make VERBOSE=1
        displayName: 'Build'

      - script: |
           #################################
           # test
           #################################
           # find spack installed cmake
           export ROOT_DIR=`pwd`
           export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           which ctest
           cd build
           # run ctest
           ctest -T test --output-on-failure -V
        displayName: 'Run Unit Tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'cTest'
          testResultsFiles: '**/Test.xml'
        displayName: 'Unit Test Results'
        condition: always()

      - script: |
           #################################
           # install
           #################################
           cd build
           make install
        displayName: 'Install'
